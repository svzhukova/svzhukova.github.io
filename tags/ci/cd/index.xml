<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD | Hugo Academic CV Theme</title>
    <link>https://svzhukova.github.io/tags/ci/cd/</link>
      <atom:link href="https://svzhukova.github.io/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    <description>CI/CD</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Thu, 20 Mar 2025 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://svzhukova.github.io/media/icon_hu_645fa481986063ef.png</url>
      <title>CI/CD</title>
      <link>https://svzhukova.github.io/tags/ci/cd/</link>
    </image>
    
    <item>
      <title>ðŸ§  Continuous integration and continuous deployment (CI/CD).</title>
      <link>https://svzhukova.github.io/post/second-brain/</link>
      <pubDate>Thu, 20 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://svzhukova.github.io/post/second-brain/</guid>
      <description>&lt;h1 id=&#34;about-the-cicd-methodology-in-simple-terms--principles-stages-pros-and-cons&#34;&gt;About the CI/CD methodology in simple terms â€” principles, stages, pros and cons&lt;/h1&gt;
&lt;h2 id=&#34;the-cicd-approach-has-been-discussed-a-lot-in-it-lately&#34;&gt;The CI/CD approach has been discussed a lot in IT lately.&lt;/h2&gt;
&lt;p&gt;It is often used to create applications or develop cloud solutions. But how is the work structured according to this methodology and how difficult is it to implement in practice? We will tell you about this in the article.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cicd&#34;&gt;What is CI/CD&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CI/CD (Continuous Integration/Continuous Delivery)&lt;/strong&gt; is a development methodology that allows you to automate the process of creating software. The approach covers all stages of development: assembly, testing and deployment of software code.&lt;/p&gt;
&lt;p&gt;In simple terms, CI/CD is an abbreviation based on the main principles of the methodology. There are only four of them:&lt;/p&gt;
&lt;p&gt;Continuous Integration â€” this concept means frequent changes to code, including those located in one repository. Continuous integration allows several developers to write code at the same time: this is convenient when working on different parts of the code.
Continuous Testing â€” automated testing of new code immediately after its integration into the repository. Tests allow you to check the code&amp;rsquo;s functionality and its compliance with quality standards.
Continuous Delivery â€” after the program code has been tested, the procedure for preparing the code for release begins. The essence of this process is that the tested code is automatically delivered to the test environment, development environment, or production.
Continuous Deployment â€” the stage of deploying code to the production environment: this action must be confirmed manually.&lt;/p&gt;
&lt;h2 id=&#34;stages-of-development-using-the-cicd-methodology&#34;&gt;Stages of development using the CI/CD methodology&lt;/h2&gt;
&lt;p&gt;Software creation using CI/CD technology occurs in several stages. Usually, the full cycle of program development using the CI/CD principle is as follows:&lt;/p&gt;
&lt;p&gt;Writing code. The developer writes new code and checks its functionality manually.
Committing changes. At the initial stage, the developer sends an updated version of the code to a common version control system (for example, Git).
Building the code and autotesting it. The development environment automatically builds the updated code and runs testing. If the tests are successful, you can move on to the next step.
Manual testing. After automatic verification, the new code is transferred to testers for manual verification.
Deployment. The finished code is placed on the developer&amp;rsquo;s servers. After that, a decision is made about its release.
Release. After testing and fixing errors, the code is updated. Once the update is complete, the product is ready for use: customers can work with the new program, studying its functionality.
Support. Customers continue to use the product and provide feedback on it. During this time, developers support the program and analyze feedback.
Planning and refinement. Based on customer feedback, new functionality or reworking of the current one is planned. When the changes are planned, developers begin writing new code - at this point the cycle closes and starts over.&lt;/p&gt;
&lt;h2 id=&#34;cicd-is-a-popular-software-development-technique-with-many-advantages-among-them&#34;&gt;CI/CD is a popular software development technique with many advantages. Among them:&lt;/h2&gt;
&lt;p&gt;Reducing development time. CI/CD allows you to speed up the software creation cycle to several days (in the case of large projects, to several people).
Selection of options. The CI/CD approach allows you to analyze the code before releasing it to the public. Thanks to this, you can choose the most suitable code option from several, as well as exclude dead-end code branches in time.
High quality testing. The CI/CD approach combines automatic and manual tests. Thanks to this, the risk of errors in the product&amp;rsquo;s operation is reduced.&lt;/p&gt;
&lt;h2 id=&#34;as-for-the-disadvantages-there-are-only-two&#34;&gt;As for the disadvantages, there are only two:&lt;/h2&gt;
&lt;p&gt;Increased requirements for experience. In order for all continuous integration and delivery processes to be carried out correctly, the manager must have experience using CI/CD. This is due to the fact that the transition to a new methodology will require a complete restructuring of the rules of work and communication within the team.
Constant interaction. An important part of CI/CD is communication between colleagues and individual teams. Often, an additional employee is required to debug them, who will control all stages.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
